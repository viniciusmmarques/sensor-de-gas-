
sistemasmicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002368  08002368  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002368  08002368  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002368  08002368  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800236c  0800236c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  0800237c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800237c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006584  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b2  00000000  00000000  000265b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00027b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00028260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016351  00000000  00000000  00028898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000787b  00000000  00000000  0003ebe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080648  00000000  00000000  00046464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001acc  00000000  00000000  000c6b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022cc 	.word	0x080022cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022cc 	.word	0x080022cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b0b8      	sub	sp, #224	; 0xe0
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb4f 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f94d 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa03 	bl	8000574 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f999 	bl	80004a4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f9d5 	bl	8000520 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f000 fba5 	bl	80008c8 <HAL_Delay>
  char inicio[] = "Iniciado com Sucesso! \r";
 800017e:	4b99      	ldr	r3, [pc, #612]	; (80003e4 <main+0x288>)
 8000180:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000184:	461d      	mov	r5, r3
 8000186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800018a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800018e:	e884 0003 	stmia.w	r4, {r0, r1}
  char semgas[] = "Sem vazamento de gas! \r";
 8000192:	4b95      	ldr	r3, [pc, #596]	; (80003e8 <main+0x28c>)
 8000194:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000198:	461d      	mov	r5, r3
 800019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001a2:	e884 0003 	stmia.w	r4, {r0, r1}
  char comgas[] = "Gas vazando! Verificar com urgencia!\r";
 80001a6:	4b91      	ldr	r3, [pc, #580]	; (80003ec <main+0x290>)
 80001a8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80001ac:	461d      	mov	r5, r3
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001ba:	6020      	str	r0, [r4, #0]
 80001bc:	3404      	adds	r4, #4
 80001be:	8021      	strh	r1, [r4, #0]
  char data[]= "\r\n";
 80001c0:	4a8b      	ldr	r2, [pc, #556]	; (80003f0 <main+0x294>)
 80001c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80001c6:	6812      	ldr	r2, [r2, #0]
 80001c8:	4611      	mov	r1, r2
 80001ca:	8019      	strh	r1, [r3, #0]
 80001cc:	3302      	adds	r3, #2
 80001ce:	0c12      	lsrs	r2, r2, #16
 80001d0:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, inicio, strlen(inicio), 2000);
 80001d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80001d6:	4618      	mov	r0, r3
 80001d8:	f7ff ffb8 	bl	800014c <strlen>
 80001dc:	4603      	mov	r3, r0
 80001de:	b29a      	uxth	r2, r3
 80001e0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80001e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80001e8:	4882      	ldr	r0, [pc, #520]	; (80003f4 <main+0x298>)
 80001ea:	f001 fe3a 	bl	8001e62 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, data, strlen(data), 2000);
 80001ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80001f2:	4618      	mov	r0, r3
 80001f4:	f7ff ffaa 	bl	800014c <strlen>
 80001f8:	4603      	mov	r3, r0
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000200:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000204:	487b      	ldr	r0, [pc, #492]	; (80003f4 <main+0x298>)
 8000206:	f001 fe2c 	bl	8001e62 <HAL_UART_Transmit>

  unsigned int ar=0;
 800020a:	2300      	movs	r3, #0
 800020c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  unsigned int x=0;
 8000210:	2300      	movs	r3, #0
 8000212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  unsigned int gas=0;
 8000216:	2300      	movs	r3, #0
 8000218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  unsigned int y=0;
 800021c:	2300      	movs	r3, #0
 800021e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  int i=0;
 8000222:	2300      	movs	r3, #0
 8000224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  int j=0;
 8000228:	2300      	movs	r3, #0
 800022a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  int l=0;
 800022e:	2300      	movs	r3, #0
 8000230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  for(i=0;i<10;i++){
 8000234:	2300      	movs	r3, #0
 8000236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800023a:	e013      	b.n	8000264 <main+0x108>
	  HAL_ADC_Start(&hadc1);
 800023c:	486e      	ldr	r0, [pc, #440]	; (80003f8 <main+0x29c>)
 800023e:	f000 fc3f 	bl	8000ac0 <HAL_ADC_Start>
      x = HAL_ADC_GetValue(&hadc1);
 8000242:	486d      	ldr	r0, [pc, #436]	; (80003f8 <main+0x29c>)
 8000244:	f000 fcea 	bl	8000c1c <HAL_ADC_GetValue>
 8000248:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
      ar = ar + x;
 800024c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000254:	4413      	add	r3, r2
 8000256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for(i=0;i<10;i++){
 800025a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800025e:	3301      	adds	r3, #1
 8000260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000268:	2b09      	cmp	r3, #9
 800026a:	dde7      	ble.n	800023c <main+0xe0>
  }

  ar = ar/10;
 800026c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000270:	4a62      	ldr	r2, [pc, #392]	; (80003fc <main+0x2a0>)
 8000272:	fba2 2303 	umull	r2, r3, r2, r3
 8000276:	08db      	lsrs	r3, r3, #3
 8000278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint8_t Rx_data[100];
  memset(Rx_data,0,100);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2264      	movs	r2, #100	; 0x64
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f81a 	bl	80022bc <memset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  gas = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  while(gas<ar){
 800028e:	e023      	b.n	80002d8 <main+0x17c>
		  for(j=0;j<10;j++){
 8000290:	2300      	movs	r3, #0
 8000292:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000296:	e013      	b.n	80002c0 <main+0x164>
			  HAL_ADC_Start(&hadc1);
 8000298:	4857      	ldr	r0, [pc, #348]	; (80003f8 <main+0x29c>)
 800029a:	f000 fc11 	bl	8000ac0 <HAL_ADC_Start>
			  y = HAL_ADC_GetValue(&hadc1);
 800029e:	4856      	ldr	r0, [pc, #344]	; (80003f8 <main+0x29c>)
 80002a0:	f000 fcbc 	bl	8000c1c <HAL_ADC_GetValue>
 80002a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
			  gas = gas + y;
 80002a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80002ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80002b0:	4413      	add	r3, r2
 80002b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		  for(j=0;j<10;j++){
 80002b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80002ba:	3301      	adds	r3, #1
 80002bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80002c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80002c4:	2b09      	cmp	r3, #9
 80002c6:	dde7      	ble.n	8000298 <main+0x13c>
		  }
		  gas = gas/10;
 80002c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80002cc:	4a4b      	ldr	r2, [pc, #300]	; (80003fc <main+0x2a0>)
 80002ce:	fba2 2303 	umull	r2, r3, r2, r3
 80002d2:	08db      	lsrs	r3, r3, #3
 80002d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  while(gas<ar){
 80002d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80002dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d3d5      	bcc.n	8000290 <main+0x134>
	  }

	  if((gas-ar)>200){
 80002e4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80002e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	2bc8      	cmp	r3, #200	; 0xc8
 80002f0:	d93a      	bls.n	8000368 <main+0x20c>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_13,1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	4841      	ldr	r0, [pc, #260]	; (8000400 <main+0x2a4>)
 80002fa:	f001 f87d 	bl	80013f8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80002fe:	2064      	movs	r0, #100	; 0x64
 8000300:	f000 fae2 	bl	80008c8 <HAL_Delay>
	      //rele = 1;
	      if(l==1){
 8000304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000308:	2b01      	cmp	r3, #1
 800030a:	d129      	bne.n	8000360 <main+0x204>
	    	  HAL_UART_Transmit(&huart1, comgas, strlen(comgas), 2000);
 800030c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff1b 	bl	800014c <strlen>
 8000316:	4603      	mov	r3, r0
 8000318:	b29a      	uxth	r2, r3
 800031a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800031e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000322:	4834      	ldr	r0, [pc, #208]	; (80003f4 <main+0x298>)
 8000324:	f001 fd9d 	bl	8001e62 <HAL_UART_Transmit>
	    	  HAL_UART_Receive (&huart1, Rx_data, 100, 2000);
 8000328:	1d39      	adds	r1, r7, #4
 800032a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800032e:	2264      	movs	r2, #100	; 0x64
 8000330:	4830      	ldr	r0, [pc, #192]	; (80003f4 <main+0x298>)
 8000332:	f001 fe28 	bl	8001f86 <HAL_UART_Receive>
	    	  HAL_UART_Transmit(&huart1, data, strlen(data), 2000);
 8000336:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff06 	bl	800014c <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000348:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800034c:	4829      	ldr	r0, [pc, #164]	; (80003f4 <main+0x298>)
 800034e:	f001 fd88 	bl	8001e62 <HAL_UART_Transmit>
	    	  HAL_UART_Receive (&huart1, Rx_data, 100, 2000);
 8000352:	1d39      	adds	r1, r7, #4
 8000354:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000358:	2264      	movs	r2, #100	; 0x64
 800035a:	4826      	ldr	r0, [pc, #152]	; (80003f4 <main+0x298>)
 800035c:	f001 fe13 	bl	8001f86 <HAL_UART_Receive>
	          //TSU(semgas);
	          }
	      l=0;
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000366:	e039      	b.n	80003dc <main+0x280>
	  }

	  else{
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_13,0);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	4824      	ldr	r0, [pc, #144]	; (8000400 <main+0x2a4>)
 8000370:	f001 f842 	bl	80013f8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000374:	2064      	movs	r0, #100	; 0x64
 8000376:	f000 faa7 	bl	80008c8 <HAL_Delay>
	      //rele = 0;
	      if(l==0){
 800037a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800037e:	2b00      	cmp	r3, #0
 8000380:	d129      	bne.n	80003d6 <main+0x27a>
	    	  HAL_UART_Transmit(&huart1, semgas, strlen(semgas), 2000);
 8000382:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff fee0 	bl	800014c <strlen>
 800038c:	4603      	mov	r3, r0
 800038e:	b29a      	uxth	r2, r3
 8000390:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000394:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000398:	4816      	ldr	r0, [pc, #88]	; (80003f4 <main+0x298>)
 800039a:	f001 fd62 	bl	8001e62 <HAL_UART_Transmit>
	    	  HAL_UART_Receive (&huart1, Rx_data, 100, 2000);
 800039e:	1d39      	adds	r1, r7, #4
 80003a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003a4:	2264      	movs	r2, #100	; 0x64
 80003a6:	4813      	ldr	r0, [pc, #76]	; (80003f4 <main+0x298>)
 80003a8:	f001 fded 	bl	8001f86 <HAL_UART_Receive>
	    	  HAL_UART_Transmit(&huart1, data, strlen(data), 2000);
 80003ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff fecb 	bl	800014c <strlen>
 80003b6:	4603      	mov	r3, r0
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80003be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <main+0x298>)
 80003c4:	f001 fd4d 	bl	8001e62 <HAL_UART_Transmit>
	    	  HAL_UART_Receive (&huart1, Rx_data, 100, 2000);
 80003c8:	1d39      	adds	r1, r7, #4
 80003ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003ce:	2264      	movs	r2, #100	; 0x64
 80003d0:	4808      	ldr	r0, [pc, #32]	; (80003f4 <main+0x298>)
 80003d2:	f001 fdd8 	bl	8001f86 <HAL_UART_Receive>
	          //TSU(comgas);
	          }
	      l=1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  }

	  gas = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  gas = 0;
 80003e2:	e751      	b.n	8000288 <main+0x12c>
 80003e4:	080022e4 	.word	0x080022e4
 80003e8:	080022fc 	.word	0x080022fc
 80003ec:	08002314 	.word	0x08002314
 80003f0:	0800233c 	.word	0x0800233c
 80003f4:	20000058 	.word	0x20000058
 80003f8:	20000028 	.word	0x20000028
 80003fc:	cccccccd 	.word	0xcccccccd
 8000400:	40010800 	.word	0x40010800

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b094      	sub	sp, #80	; 0x50
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040e:	2228      	movs	r2, #40	; 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f001 ff52 	bl	80022bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2310      	movs	r3, #16
 800043e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000440:	2300      	movs	r3, #0
 8000442:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000448:	4618      	mov	r0, r3
 800044a:	f000 ffed 	bl	8001428 <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000454:	f000 f8c2 	bl	80005dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fa58 	bl	8001928 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800047e:	f000 f8ad 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000482:	2302      	movs	r3, #2
 8000484:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fbe5 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000498:	f000 f8a0 	bl	80005dc <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3750      	adds	r7, #80	; 0x50
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <MX_ADC1_Init+0x74>)
 80004b6:	4a19      	ldr	r2, [pc, #100]	; (800051c <MX_ADC1_Init+0x78>)
 80004b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <MX_ADC1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <MX_ADC1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <MX_ADC1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MX_ADC1_Init+0x74>)
 80004ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_ADC1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_ADC1_Init+0x74>)
 80004dc:	2201      	movs	r2, #1
 80004de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <MX_ADC1_Init+0x74>)
 80004e2:	f000 fa15 	bl	8000910 <HAL_ADC_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004ec:	f000 f876 	bl	80005dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	4619      	mov	r1, r3
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_ADC1_Init+0x74>)
 8000502:	f000 fb97 	bl	8000c34 <HAL_ADC_ConfigChannel>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800050c:	f000 f866 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000028 	.word	0x20000028
 800051c:	40012400 	.word	0x40012400

08000520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <MX_USART1_UART_Init+0x50>)
 8000528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800052c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000558:	f001 fc36 	bl	8001dc8 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000562:	f000 f83b 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000058 	.word	0x20000058
 8000570:	40013800 	.word	0x40013800

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_GPIO_Init+0x60>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <MX_GPIO_Init+0x60>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_GPIO_Init+0x60>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_GPIO_Init+0x64>)
 80005a8:	f000 ff26 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2302      	movs	r3, #2
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0x64>)
 80005c6:	f000 fd9d 	bl	8001104 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_MspInit+0x5c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x5c>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_MspInit+0x60>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_MspInit+0x60>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_ADC_MspInit+0x6c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d121      	bne.n	80006b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_ADC_MspInit+0x70>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <HAL_ADC_MspInit+0x70>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_ADC_MspInit+0x70>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_ADC_MspInit+0x70>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <HAL_ADC_MspInit+0x70>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_ADC_MspInit+0x70>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a0:	2303      	movs	r3, #3
 80006a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <HAL_ADC_MspInit+0x74>)
 80006ac:	f000 fd2a 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40012400 	.word	0x40012400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_UART_MspInit+0x8c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d131      	bne.n	8000748 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_UART_MspInit+0x90>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_UART_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <HAL_UART_MspInit+0x94>)
 800072a:	f000 fceb 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000744:	f000 fcde 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a2:	f000 f875 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
	...

080007b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ba:	e003      	b.n	80007c4 <LoopCopyDataInit>

080007bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007c2:	3104      	adds	r1, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007cc:	d3f6      	bcc.n	80007bc <CopyDataInit>
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007d0:	e002      	b.n	80007d8 <LoopFillZerobss>

080007d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007d4:	f842 3b04 	str.w	r3, [r2], #4

080007d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007dc:	d3f9      	bcc.n	80007d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007de:	f7ff ffe4 	bl	80007aa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e2:	f001 fd47 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e6:	f7ff fcb9 	bl	800015c <main>
  bx lr
 80007ea:	4770      	bx	lr
  ldr r3, =_sidata
 80007ec:	08002370 	.word	0x08002370
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007f8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007fc:	2000009c 	.word	0x2000009c

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_Init+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_Init+0x28>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 fc41 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f808 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff fee2 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fc4b 	bl	80010ea <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f000 fc21 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <HAL_IncTick+0x20>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000098 	.word	0x20000098

080008b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000098 	.word	0x20000098

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fff0 	bl	80008b4 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffe0 	bl	80008b4 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e0be      	b.n	8000ab0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093c:	2b00      	cmp	r3, #0
 800093e:	d109      	bne.n	8000954 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fe7c 	bl	800064c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fab7 	bl	8000ec8 <ADC_ConversionStop_Disable>
 800095a:	4603      	mov	r3, r0
 800095c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 8099 	bne.w	8000a9e <HAL_ADC_Init+0x18e>
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 8095 	bne.w	8000a9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000978:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800097c:	f023 0302 	bic.w	r3, r3, #2
 8000980:	f043 0202 	orr.w	r2, r3, #2
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000990:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7b1b      	ldrb	r3, [r3, #12]
 8000996:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000998:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	4313      	orrs	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a8:	d003      	beq.n	80009b2 <HAL_ADC_Init+0xa2>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d102      	bne.n	80009b8 <HAL_ADC_Init+0xa8>
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	e000      	b.n	80009ba <HAL_ADC_Init+0xaa>
 80009b8:	2300      	movs	r3, #0
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7d1b      	ldrb	r3, [r3, #20]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d119      	bne.n	80009fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	7b1b      	ldrb	r3, [r3, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d109      	bne.n	80009e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	035a      	lsls	r2, r3, #13
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	e00b      	b.n	80009fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e8:	f043 0220 	orr.w	r2, r3, #32
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f4:	f043 0201 	orr.w	r2, r3, #1
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <HAL_ADC_Init+0x1a8>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	430b      	orrs	r3, r1
 8000a22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a2c:	d003      	beq.n	8000a36 <HAL_ADC_Init+0x126>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d104      	bne.n	8000a40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	051b      	lsls	r3, r3, #20
 8000a3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_ADC_Init+0x1ac>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d10b      	bne.n	8000a7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6e:	f023 0303 	bic.w	r3, r3, #3
 8000a72:	f043 0201 	orr.w	r2, r3, #1
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a7a:	e018      	b.n	8000aae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	f023 0312 	bic.w	r3, r3, #18
 8000a84:	f043 0210 	orr.w	r2, r3, #16
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	f043 0201 	orr.w	r2, r3, #1
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a9c:	e007      	b.n	8000aae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	f043 0210 	orr.w	r2, r3, #16
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	ffe1f7fd 	.word	0xffe1f7fd
 8000abc:	ff1f0efe 	.word	0xff1f0efe

08000ac0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d101      	bne.n	8000ada <HAL_ADC_Start+0x1a>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e098      	b.n	8000c0c <HAL_ADC_Start+0x14c>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2201      	movs	r2, #1
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f99e 	bl	8000e24 <ADC_Enable>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 8087 	bne.w	8000c02 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000afc:	f023 0301 	bic.w	r3, r3, #1
 8000b00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a41      	ldr	r2, [pc, #260]	; (8000c14 <HAL_ADC_Start+0x154>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d105      	bne.n	8000b1e <HAL_ADC_Start+0x5e>
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <HAL_ADC_Start+0x158>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d115      	bne.n	8000b4a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d026      	beq.n	8000b86 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b48:	e01d      	b.n	8000b86 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <HAL_ADC_Start+0x158>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d004      	beq.n	8000b6a <HAL_ADC_Start+0xaa>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <HAL_ADC_Start+0x154>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10d      	bne.n	8000b86 <HAL_ADC_Start+0xc6>
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <HAL_ADC_Start+0x158>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	f023 0206 	bic.w	r2, r3, #6
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	e002      	b.n	8000ba6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f06f 0202 	mvn.w	r2, #2
 8000bb6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bc2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bc6:	d113      	bne.n	8000bf0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_ADC_Start+0x154>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d105      	bne.n	8000bde <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_ADC_Start+0x158>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d108      	bne.n	8000bf0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	e00c      	b.n	8000c0a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	e003      	b.n	8000c0a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40012800 	.word	0x40012800
 8000c18:	40012400 	.word	0x40012400

08000c1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x20>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e0dc      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x1da>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b06      	cmp	r3, #6
 8000c62:	d81c      	bhi.n	8000c9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	3b05      	subs	r3, #5
 8000c76:	221f      	movs	r2, #31
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4019      	ands	r1, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3b05      	subs	r3, #5
 8000c90:	fa00 f203 	lsl.w	r2, r0, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9c:	e03c      	b.n	8000d18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b0c      	cmp	r3, #12
 8000ca4:	d81c      	bhi.n	8000ce0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b23      	subs	r3, #35	; 0x23
 8000cb8:	221f      	movs	r2, #31
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4019      	ands	r1, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b23      	subs	r3, #35	; 0x23
 8000cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8000cde:	e01b      	b.n	8000d18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	3b41      	subs	r3, #65	; 0x41
 8000cf2:	221f      	movs	r2, #31
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4019      	ands	r1, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	3b41      	subs	r3, #65	; 0x41
 8000d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d91c      	bls.n	8000d5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68d9      	ldr	r1, [r3, #12]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	3b1e      	subs	r3, #30
 8000d32:	2207      	movs	r2, #7
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4019      	ands	r1, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	6898      	ldr	r0, [r3, #8]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b1e      	subs	r3, #30
 8000d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	e019      	b.n	8000d8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4019      	ands	r1, r3
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6898      	ldr	r0, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	fa00 f203 	lsl.w	r2, r0, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d003      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d9a:	2b11      	cmp	r3, #17
 8000d9c:	d132      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_ADC_ConfigChannel+0x1e4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d125      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d126      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dc4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b10      	cmp	r3, #16
 8000dcc:	d11a      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_ADC_ConfigChannel+0x1e8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	0c9a      	lsrs	r2, r3, #18
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000de4:	e002      	b.n	8000dec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <HAL_ADC_ConfigChannel+0x1b2>
 8000df2:	e007      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	f043 0220 	orr.w	r2, r3, #32
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40012400 	.word	0x40012400
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	431bde83 	.word	0x431bde83

08000e24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d039      	beq.n	8000eb6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <ADC_Enable+0x9c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <ADC_Enable+0xa0>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e60:	e002      	b.n	8000e68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f9      	bne.n	8000e62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e6e:	f7ff fd21 	bl	80008b4 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e74:	e018      	b.n	8000ea8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e76:	f7ff fd1d 	bl	80008b4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d911      	bls.n	8000ea8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f043 0210 	orr.w	r2, r3, #16
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e007      	b.n	8000eb8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d1df      	bne.n	8000e76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	431bde83 	.word	0x431bde83

08000ec8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d127      	bne.n	8000f32 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0201 	bic.w	r2, r2, #1
 8000ef0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ef2:	f7ff fcdf 	bl	80008b4 <HAL_GetTick>
 8000ef6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	e014      	b.n	8000f24 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000efa:	f7ff fcdb 	bl	80008b4 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d90d      	bls.n	8000f24 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f043 0210 	orr.w	r2, r3, #16
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	f043 0201 	orr.w	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e007      	b.n	8000f34 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d0e3      	beq.n	8000efa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff90 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff49 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff5e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff90 	bl	8000ff4 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5f 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb0 	bl	8001058 <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	; 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e148      	b.n	80013aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001118:	2201      	movs	r2, #1
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8137 	bne.w	80013a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4aa3      	ldr	r2, [pc, #652]	; (80013c8 <HAL_GPIO_Init+0x2c4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d05e      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001140:	4aa1      	ldr	r2, [pc, #644]	; (80013c8 <HAL_GPIO_Init+0x2c4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d875      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001146:	4aa1      	ldr	r2, [pc, #644]	; (80013cc <HAL_GPIO_Init+0x2c8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d058      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 800114c:	4a9f      	ldr	r2, [pc, #636]	; (80013cc <HAL_GPIO_Init+0x2c8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d86f      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001152:	4a9f      	ldr	r2, [pc, #636]	; (80013d0 <HAL_GPIO_Init+0x2cc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d052      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001158:	4a9d      	ldr	r2, [pc, #628]	; (80013d0 <HAL_GPIO_Init+0x2cc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d869      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800115e:	4a9d      	ldr	r2, [pc, #628]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04c      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001164:	4a9b      	ldr	r2, [pc, #620]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d863      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800116a:	4a9b      	ldr	r2, [pc, #620]	; (80013d8 <HAL_GPIO_Init+0x2d4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d046      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001170:	4a99      	ldr	r2, [pc, #612]	; (80013d8 <HAL_GPIO_Init+0x2d4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d85d      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d82a      	bhi.n	80011d0 <HAL_GPIO_Init+0xcc>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d859      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <HAL_GPIO_Init+0x80>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011d9 	.word	0x080011d9
 800118c:	080011eb 	.word	0x080011eb
 8001190:	0800122d 	.word	0x0800122d
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	08001233 	.word	0x08001233
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001233 	.word	0x08001233
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	4a82      	ldr	r2, [pc, #520]	; (80013dc <HAL_GPIO_Init+0x2d8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e029      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e024      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01f      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e01a      	b.n	8001234 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e013      	b.n	8001234 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e009      	b.n	8001234 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e003      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x130>
          break;
 8001232:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	; 0xff
 8001238:	d801      	bhi.n	800123e <HAL_GPIO_Init+0x13a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d802      	bhi.n	8001250 <HAL_GPIO_Init+0x14c>
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x152>
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3b08      	subs	r3, #8
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	210f      	movs	r1, #15
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	6a39      	ldr	r1, [r7, #32]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8090 	beq.w	80013a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001284:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a55      	ldr	r2, [pc, #340]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_GPIO_Init+0x2e0>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a49      	ldr	r2, [pc, #292]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1e0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1dc>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1d8>
 80012d8:	2302      	movs	r3, #2
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1e2>
 80012dc:	2303      	movs	r3, #3
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1e2>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1e2>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	493b      	ldr	r1, [pc, #236]	; (80013e4 <HAL_GPIO_Init+0x2e0>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4933      	ldr	r1, [pc, #204]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001328:	4013      	ands	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	492d      	ldr	r1, [pc, #180]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	4929      	ldr	r1, [pc, #164]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001350:	4013      	ands	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	4923      	ldr	r1, [pc, #140]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	491f      	ldr	r1, [pc, #124]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001378:	4013      	ands	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4919      	ldr	r1, [pc, #100]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4915      	ldr	r1, [pc, #84]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f47f aeaf 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	372c      	adds	r7, #44	; 0x2c
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	10320000 	.word	0x10320000
 80013cc:	10310000 	.word	0x10310000
 80013d0:	10220000 	.word	0x10220000
 80013d4:	10210000 	.word	0x10210000
 80013d8:	10120000 	.word	0x10120000
 80013dc:	10110000 	.word	0x10110000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e26c      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8087 	beq.w	8001556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001448:	4b92      	ldr	r3, [pc, #584]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00c      	beq.n	800146e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001454:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d112      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
 8001460:	4b8c      	ldr	r3, [pc, #560]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d06c      	beq.n	8001554 <HAL_RCC_OscConfig+0x12c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d168      	bne.n	8001554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e246      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x76>
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a7f      	ldr	r2, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e02e      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7a      	ldr	r2, [pc, #488]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b78      	ldr	r3, [pc, #480]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a77      	ldr	r2, [pc, #476]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0xbc>
 80014ca:	4b72      	ldr	r3, [pc, #456]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a71      	ldr	r2, [pc, #452]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6e      	ldr	r2, [pc, #440]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 80014e4:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a6a      	ldr	r2, [pc, #424]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a67      	ldr	r2, [pc, #412]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff f9d6 	bl	80008b4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff f9d2 	bl	80008b4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1fa      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xe4>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff f9c2 	bl	80008b4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff f9be 	bl	80008b4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1e6      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x10c>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d063      	beq.n	800162a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001562:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x18c>
 800157a:	4b46      	ldr	r3, [pc, #280]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b43      	ldr	r3, [pc, #268]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x176>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1ba      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4939      	ldr	r1, [pc, #228]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e03a      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f977 	bl	80008b4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff f973 	bl	80008b4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e19b      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4927      	ldr	r1, [pc, #156]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff f956 	bl	80008b4 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff f952 	bl	80008b4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e17a      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03a      	beq.n	80016ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_RCC_OscConfig+0x274>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff f936 	bl	80008b4 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff f932 	bl	80008b4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e15a      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f000 fad8 	bl	8001c20 <RCC_Delay>
 8001670:	e01c      	b.n	80016ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_RCC_OscConfig+0x274>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f91c 	bl	80008b4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167e:	e00f      	b.n	80016a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff f918 	bl	80008b4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d908      	bls.n	80016a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e140      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	42420000 	.word	0x42420000
 800169c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b9e      	ldr	r3, [pc, #632]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e9      	bne.n	8001680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a6 	beq.w	8001806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b97      	ldr	r3, [pc, #604]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b94      	ldr	r3, [pc, #592]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a93      	ldr	r2, [pc, #588]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a8a      	ldr	r2, [pc, #552]	; (8001920 <HAL_RCC_OscConfig+0x4f8>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f8d9 	bl	80008b4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff f8d5 	bl	80008b4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	; 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0fd      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x4f8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x312>
 800172c:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a7a      	ldr	r2, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e02d      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x334>
 8001742:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a75      	ldr	r2, [pc, #468]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a72      	ldr	r2, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e01c      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x356>
 8001764:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a6c      	ldr	r2, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a69      	ldr	r2, [pc, #420]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800177e:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a66      	ldr	r2, [pc, #408]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b64      	ldr	r3, [pc, #400]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a63      	ldr	r2, [pc, #396]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f889 	bl	80008b4 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f885 	bl	80008b4 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e0ab      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ee      	beq.n	80017a6 <HAL_RCC_OscConfig+0x37e>
 80017c8:	e014      	b.n	80017f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f873 	bl	80008b4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f86f 	bl	80008b4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e095      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fa:	4b48      	ldr	r3, [pc, #288]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a47      	ldr	r2, [pc, #284]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8081 	beq.w	8001912 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d061      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d146      	bne.n	80018b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f843 	bl	80008b4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f83f 	bl	80008b4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e067      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d108      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800185a:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	492d      	ldr	r1, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a19      	ldr	r1, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	430b      	orrs	r3, r1
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff f813 	bl	80008b4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff f80f 	bl	80008b4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e037      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x46a>
 80018b0:	e02f      	b.n	8001912 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7fe fffc 	bl	80008b4 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7fe fff8 	bl	80008b4 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e020      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x498>
 80018de:	e018      	b.n	8001912 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e013      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	40007000 	.word	0x40007000
 8001924:	42420060 	.word	0x42420060

08001928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0d0      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d910      	bls.n	800196c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4965      	ldr	r1, [pc, #404]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800198e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	494d      	ldr	r1, [pc, #308]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d040      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d115      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e073      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e06b      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4936      	ldr	r1, [pc, #216]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7fe ff4c 	bl	80008b4 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7fe ff48 	bl	80008b4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e053      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d210      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0207 	bic.w	r2, r3, #7
 8001a5e:	4922      	ldr	r1, [pc, #136]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e032      	b.n	8001ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab6:	f000 f821 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490a      	ldr	r1, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe feaa 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08002350 	.word	0x08002350
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	b490      	push	{r4, r7}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b04:	1d3c      	adds	r4, r7, #4
 8001b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b0c:	f240 2301 	movw	r3, #513	; 0x201
 8001b10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x40>
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x46>
 8001b3a:	e02d      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3e:	623b      	str	r3, [r7, #32]
      break;
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b4e:	4413      	add	r3, r2
 8001b50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	0c5b      	lsrs	r3, r3, #17
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6e:	4413      	add	r3, r2
 8001b70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7a:	fb02 f203 	mul.w	r2, r2, r3
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	e004      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	623b      	str	r3, [r7, #32]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b9a:	623b      	str	r3, [r7, #32]
      break;
 8001b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc90      	pop	{r4, r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	08002340 	.word	0x08002340
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	003d0900 	.word	0x003d0900

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08002360 	.word	0x08002360

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08002360 	.word	0x08002360

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d07d      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	61d3      	str	r3, [r2, #28]
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d118      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb0:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbc:	f7fe fdfa 	bl	80008b4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7fe fdf6 	bl	80008b4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e06d      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02e      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d027      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d16:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d014      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe fdc5 	bl	80008b4 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fdc1 	bl	80008b4 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e036      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ee      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4917      	ldr	r1, [pc, #92]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	490b      	ldr	r1, [pc, #44]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4904      	ldr	r1, [pc, #16]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42420440 	.word	0x42420440

08001dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e03f      	b.n	8001e5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fc68 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f9a3 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	; 0x28
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d17c      	bne.n	8001f7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_UART_Transmit+0x2c>
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e075      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_UART_Transmit+0x3e>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e06e      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2221      	movs	r2, #33	; 0x21
 8001eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fcfd 	bl	80008b4 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d108      	bne.n	8001ee4 <HAL_UART_Transmit+0x82>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	e003      	b.n	8001eec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ef4:	e02a      	b.n	8001f4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f8df 	bl	80020c4 <UART_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e036      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10b      	bne.n	8001f2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	e007      	b.n	8001f3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1cf      	bne.n	8001ef6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 f8af 	bl	80020c4 <UART_WaitOnFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e006      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e000      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f7c:	2302      	movs	r3, #2
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	f040 8089 	bne.w	80020ba <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_UART_Receive+0x2e>
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e081      	b.n	80020bc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Receive+0x40>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e07a      	b.n	80020bc <HAL_UART_Receive+0x136>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2222      	movs	r2, #34	; 0x22
 8001fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fc6a 	bl	80008b4 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	88fa      	ldrh	r2, [r7, #6]
 8001fe6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff6:	d108      	bne.n	800200a <HAL_UART_Receive+0x84>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	e003      	b.n	8002012 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800201a:	e043      	b.n	80020a4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	2120      	movs	r1, #32
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f84c 	bl	80020c4 <UART_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e042      	b.n	80020bc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002048:	b29a      	uxth	r2, r3
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	3302      	adds	r3, #2
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e01f      	b.n	8002096 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205e:	d007      	beq.n	8002070 <HAL_UART_Receive+0xea>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_UART_Receive+0xf8>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e008      	b.n	8002090 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800208a:	b2da      	uxtb	r2, r3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1b6      	bne.n	800201c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
  }
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d4:	e02c      	b.n	8002130 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d028      	beq.n	8002130 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80020e4:	f7fe fbe6 	bl	80008b4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d21d      	bcs.n	8002130 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002102:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e00f      	b.n	8002150 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	429a      	cmp	r2, r3
 800214c:	d0c3      	beq.n	80020d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2c      	ldr	r2, [pc, #176]	; (800226c <UART_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff fd1a 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	e002      	b.n	80021ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021c8:	f7ff fd02 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	0119      	lsls	r1, r3, #4
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f2f3 	udiv	r2, r2, r3
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <UART_SetConfig+0x118>)
 8002206:	fba3 0302 	umull	r0, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <UART_SetConfig+0x118>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	4419      	add	r1, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <UART_SetConfig+0x118>)
 800223e:	fba3 0302 	umull	r0, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2064      	movs	r0, #100	; 0x64
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	440a      	add	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013800 	.word	0x40013800
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	2600      	movs	r6, #0
 8002278:	4d0c      	ldr	r5, [pc, #48]	; (80022ac <__libc_init_array+0x38>)
 800227a:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227c:	1b64      	subs	r4, r4, r5
 800227e:	10a4      	asrs	r4, r4, #2
 8002280:	42a6      	cmp	r6, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	f000 f822 	bl	80022cc <_init>
 8002288:	2600      	movs	r6, #0
 800228a:	4d0a      	ldr	r5, [pc, #40]	; (80022b4 <__libc_init_array+0x40>)
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <__libc_init_array+0x44>)
 800228e:	1b64      	subs	r4, r4, r5
 8002290:	10a4      	asrs	r4, r4, #2
 8002292:	42a6      	cmp	r6, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f855 3b04 	ldr.w	r3, [r5], #4
 800229c:	4798      	blx	r3
 800229e:	3601      	adds	r6, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a6:	4798      	blx	r3
 80022a8:	3601      	adds	r6, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002368 	.word	0x08002368
 80022b0:	08002368 	.word	0x08002368
 80022b4:	08002368 	.word	0x08002368
 80022b8:	0800236c 	.word	0x0800236c

080022bc <memset>:
 80022bc:	4603      	mov	r3, r0
 80022be:	4402      	add	r2, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <_init>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr

080022d8 <_fini>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr
